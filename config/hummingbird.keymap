/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF_L 0
#define SEC_L 1
#define NAV_L 2
#define SYM_L 3
#define NUM_L 4

/* Shortcuts */
#define CUT LG(X)
#define COPY LG(C)
#define PASTE LG(V)
#define UNDO LG(Z)
#define REDO LS(LG(Z))
#define SLALL LG(A)
#define BSWRD LA(BSPC)
#define LWRD LA(LARW)
#define RWRD LA(RARW)
#define HDR LG(LA(1))
#define PLA LA(A)
#define PLC LA(C)
#define PLE LA(E)
#define PLL LA(L)
#define PLN LA(N)
#define PLO LA(O)
#define PLS LA(S)
#define PLZ LA(Z)
#define PLZI LA(X)

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        sm: sticky_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_MOD";
            #binding-cells = <1>;
            release-after-ms = <1500>;
            bindings = <&kp>;
            ignore-modifiers;
            quick-release;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHIFT >, <&kp L>;
        };
    };

    macros {
        slsec: sl_sec {
            label = "SL_SEC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &sl SEC_L>
                ;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SEC_L>;
            then-layer = <NUM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

        /* Letters */
        v { key-positions = <12 13>; bindings = <&kp V>; layers = <DEF_L>; };
        k { key-positions = <16 17>; bindings = <&kp K>; layers = <DEF_L>; };
        z { key-positions = <10 11>; bindings = <&kp Z>; layers = <DEF_L>; };

        /* Symbols */
        bswrd { key-positions = <15 16>; bindings = <&kp BSWRD>; layers = <DEF_L>; };
        semi { key-positions = <24 25>; bindings = <&kp SEMI>; layers = <DEF_L SYM_L NUM_L>; };
        tilde { key-positions = <10 11>; bindings = <&kp TILDE>; layers = <SYM_L>; };

        /* Brackets */
        lbkt { key-positions = <1 11>; bindings = <&kp LBKT>; layers = <DEF_L SYM_L NUM_L>; };
        rbkt { key-positions = <8 18>; bindings = <&kp RBKT>; layers = <DEF_L SYM_L NUM_L>; };
        lpar { key-positions = <2 12>; bindings = <&kp LPAR>; layers = <DEF_L SYM_L NUM_L>; };
        rpar { key-positions = <7 17>; bindings = <&kp RPAR>; layers = <DEF_L SYM_L NUM_L>; };
        lbrc { key-positions = <3 13>; bindings = <&kp LBRC>; layers = <DEF_L SYM_L NUM_L>; };
        rbrc { key-positions = <6 16>; bindings = <&kp RBRC>; layers = <DEF_L SYM_L NUM_L>; };

        /* Convenience */
        esc { key-positions = <3 4>; bindings = <&kp ESC>; };
        del { key-positions = <13 14>; bindings = <&kp DEL>; };
        slall { key-positions = <20 21>; bindings = <&kp SLALL>; layers = <NAV_L>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp Q     &kp W     &kp F     &kp P     &kp B       &kp J    &kp L     &kp U     &kp Y     &sl SYM_L
                &kp A     &kp R     &kp S     &kp T     &kp G       &kp M    &kp N     &kp E     &kp I     &kp O
                          &kp X     &kp C     &kp D                          &kp H     &kp COMMA &kp DOT
                                              &sl NAV_L &kp SPACE   &tog NUM_L     &slsec 
            >;
        };
        second_layer {
            label = "Sec";
            bindings = <
                &kp PLA    &kp PLZ  &trans     &trans     &bt BT_SEL 0  &trans     &kp PLL    &kp F8     &kp F9     &kp F10
                &kp Z      &kp Z    &kp PLS    &kp V      &bt BT_SEL 1  &kp K      &kp K      &kp PLE    &sk LSHIFT &kp PLO
                           &kp PLZI &kp PLC    &trans                              &kp PLN    &trans     &trans 
                                               &trans     &kp ENTER     &trans     &trans

            >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
                &kp BSPC  &kp UNDO  &kp F3    &kp F4    &kp REDO    &kp PG_UP &kp HOME  &kp UARW  &kp END   &kp ESC
                &kp BSWRD &sm LALT  &sm LSHFT &sm LGUI  &sm LCTRL   &kp PG_DN &kp LARW  &kp DARW  &kp RARW  &kp TAB
                          &kp CUT   &kp COPY  &kp PASTE                       &kp LWRD  &kp ENTER  &kp RWRD
                                              &trans    &trans      &sm LGUI  &trans
            >;
        };
        sym_layer {
            label = "Sym";
            bindings = <
                &kp EXCL   &kp EQUAL &kp SQT   &kp DQT   &kp PRCNT    &kp COLON &kp ASTRK &kp UNDER &kp LT    &kp GT
                &kp QMARK  &kp HASH  &kp MINUS &kp PLUS  &kp AT       &kp FSLH  &kp LGUI  &kp LSHFT &kp LALT  &kp SEMI
                           &kp PIPE  &kp CARET &kp DLLR                         &kp BSLH  &kp LPAR  &kp AMPS
                                               &trans    &trans       &trans    &trans
            >;
        };
        num_layer {
            label = "Num";
            bindings = <
                &kp HDR   &kp LCTRL &kp LALT  &kp LGUI  &none       &none     &kp LGUI  &kp LALT  &kp LCTRL &none 
                &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                          &none     &none     &kp N5                          &kp N6    &none     &none 
                                              &trans    &to DEF_L   &trans    &trans
            >;
        };
    };
};          